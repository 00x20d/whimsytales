// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Character {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  name       String
  age        Int
  interests  String[]
  gender     String
  is_main    Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model User {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String      @unique
  password_hash       String?
  name                String?
  profile_picture_url String?
  auth_provider       String?
  auth_provider_id    String?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now()) @updatedAt
  stories             Story[]
  user_groups         UserGroup[]
  Character           Character[]
}

model Group {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  genre       String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  stories     Story[]
  user_groups UserGroup[]
}

model UserGroup {
  user_id   String   @db.Uuid
  group_id  String   @db.Uuid
  joined_at DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
  group     Group    @relation(fields: [group_id], references: [id])

  @@id([user_id, group_id])
}

model Moral {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  stories     Story[]
}

model Story {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String  @db.Uuid
  group_id   String? @db.Uuid
  title      String
  content    String
  play_count Int     @default(0)
  clap_count Int     @default(0)

  cover_image_url String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  user            User        @relation(fields: [user_id], references: [id])
  group           Group?      @relation(fields: [group_id], references: [id])
  story_parts     StoryPart[]
  audio_files     AudioFile[]
  moral_id        String?     @db.Uuid
  moral           Moral?      @relation(fields: [moral_id], references: [id])
}

model StoryPart {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  story_id    String   @db.Uuid
  part_number Int
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  story       Story    @relation(fields: [story_id], references: [id])
}

model AudioFile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  story_id   String   @db.Uuid
  file_url   String
  created_at DateTime @default(now())
  story      Story    @relation(fields: [story_id], references: [id])
}
